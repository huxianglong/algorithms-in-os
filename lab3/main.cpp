// C++ implementation to read// file word by word#include <fstream>#include <iostream>#include <string>#include <cctype>#include <vector>#include <unordered_map>#include <regex>#include <sstream>#include <iomanip>#include <cstdlib>#include <cstdio>#include <list>#include "utils.h"using namespace std;bool if_debug = true;Pge page_tye;int frame_number = 0;int num_process = 0;vector<Ins> instructions;vector<Pte> page_table;vector<Process> processes;std::ifstream ifs; // the input filevoid init(int argc, char *argv[]) {    if (argc != 6) {        cout << "Please use: lab03.exe -a[fsrnca] -o[OPFS] -f<num_frames> inputfile randfile" << endl;        exit(0);    }    string input_name, rand_name, num_frames, pager_name;    pager_name = argv[1];    num_frames = argv[3];    frame_number = stoi(num_frames.substr(2, string::npos));    input_name = argv[4];    rand_name = argv[5];    unordered_map<char, Pge> type_map{            {'f', Fifo},            {'s', Sec_chance},            {'r', Random},            {'n', Nru},            {'c', Clock},            {'a', Aging}    };    page_tye = type_map[pager_name[2]];    // load random file    load_rand(rand_name);    // read all the process into an vector    ifs.open(input_name);    if (!ifs) {        cout << "Cannot open input file.\n";        exit(1);    }    // temporary variables to read processes    string l;    int i = 0;    // get the number of processes    while (getline(ifs, l)) {        // skip the beginning of comment        if (l[0] == '#')            continue;        // get the number and exit        else {            istringstream iss(l);            string token;            iss >> token;            num_process = stoi(token);            break;        }    }    // get the process info    bool read_vma = false;    while(getline(ifs, l)){        // skip the beginning of comment        if (l[0] == '#') {            read_vma = false;            continue;        }        else {            istringstream iss(l);            string token;            iss >> token;            if (read_vma)            num_process = stoi(token);        }    }}int main(int argc, char *argv[]) {    init(argc, argv);}